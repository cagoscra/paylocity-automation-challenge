{
	"info": {
		"_postman_id": "c314d43d-aa87-44a9-8e69-bb86659b3d07",
		"name": "Paylocity API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10133900"
	},
	"item": [
		{
			"name": "Prod/Api/Employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Array contains employees\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Each employee has required fields\", function () {",
							"    const responseJson = pm.response.json();",
							"    responseJson.forEach(employee => {",
							"        pm.expect(employee).to.have.property('id');",
							"        pm.expect(employee).to.have.property('firstName');",
							"        pm.expect(employee).to.have.property('lastName');",
							"        pm.expect(employee).to.have.property('dependants');",
							"        pm.expect(employee).to.have.property('salary');",
							"        pm.expect(employee).to.have.property('benefitsCost');",
							"        pm.expect(employee).to.have.property('net');",
							"    });",
							"});",
							"",
							"pm.test(\"Benefits calculation is correct\", function () {",
							"    const responseJson = pm.response.json();",
							"    responseJson.forEach(employee => {",
							"        const expectedCost = (1000 + (employee.dependants * 500)) / 26;",
							"        pm.expect(employee.benefitsCost).to.be.closeTo(expectedCost, 0.01);",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3NzM6NnEwXWwkQktPVWIh",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/Api/Employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"Api",
						"Employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prod/Api/Employees/2a107f7d-c592-45b0-ae07-fbc905206c40",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an object\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Employee has all required fields\", function () {",
							"    const employee = pm.response.json();",
							"    pm.expect(employee).to.have.property('id');",
							"    pm.expect(employee).to.have.property('firstName');",
							"    pm.expect(employee).to.have.property('lastName');",
							"    pm.expect(employee).to.have.property('dependants');",
							"    pm.expect(employee).to.have.property('salary', 52000);",
							"    pm.expect(employee).to.have.property('gross', 2000);",
							"});",
							"",
							"pm.test(\"ID matches requested ID\", function () {",
							"    const employee = pm.response.json();",
							"    const requestedId = pm.request.url.path[pm.request.url.path.length - 1];",
							"    pm.expect(employee.id).to.equal(requestedId);",
							"});",
							"",
							"pm.test(\"Benefits calculation is accurate\", function () {",
							"    const employee = pm.response.json();",
							"    const expectedCost = (1000 + (employee.dependants * 500)) / 26;",
							"    const expectedNet = 2000 - expectedCost;",
							"    ",
							"    pm.expect(employee.benefitsCost).to.be.closeTo(expectedCost, 0.01);",
							"    pm.expect(employee.net).to.be.closeTo(expectedNet, 0.01);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3NzM6NnEwXWwkQktPVWIh",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/Api/Employees/2a107f7d-c592-45b0-ae07-fbc905206c40",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"Api",
						"Employees",
						"2a107f7d-c592-45b0-ae07-fbc905206c40"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prod/Api/Employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Employee was created successfully\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.expect(newEmployee).to.have.property('id');",
							"    pm.expect(newEmployee.id).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Created employee has correct data\", function () {",
							"    const newEmployee = pm.response.json();",
							"    const requestBody = JSON.parse(pm.request.body.raw);",
							"    ",
							"    pm.expect(newEmployee.firstName).to.equal(requestBody.firstName);",
							"    pm.expect(newEmployee.lastName).to.equal(requestBody.lastName);",
							"    pm.expect(newEmployee.dependants).to.equal(requestBody.dependants);",
							"});",
							"",
							"pm.test(\"Default values are set correctly\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.expect(newEmployee.salary).to.equal(52000);",
							"    pm.expect(newEmployee.gross).to.equal(2000);",
							"    pm.expect(newEmployee.username).to.equal(\"TestUser773\");",
							"});",
							"",
							"pm.test(\"Benefits are calculated correctly\", function () {",
							"    const newEmployee = pm.response.json();",
							"    const expectedCost = (1000 + (newEmployee.dependants * 500)) / 26;",
							"    const expectedNet = 2000 - expectedCost;",
							"    ",
							"    pm.expect(newEmployee.benefitsCost).to.be.closeTo(expectedCost, 0.01);",
							"    pm.expect(newEmployee.net).to.be.closeTo(expectedNet, 0.01);",
							"});",
							"",
							"// Guardar ID para usar en otros tests",
							"pm.test(\"Save employee ID for cleanup\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.globals.set(\"createdEmployeeId\", newEmployee.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3NzM6NnEwXWwkQktPVWIh",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Oscar\",\n    \"lastName\": \"Test\",\n    \"dependants\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/Api/Employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"Api",
						"Employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prod/Api/Employees Edge case 10 dependents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Employee was created successfully\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.expect(newEmployee).to.have.property('id');",
							"    pm.expect(newEmployee.id).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Created employee has correct data\", function () {",
							"    const newEmployee = pm.response.json();",
							"    const requestBody = JSON.parse(pm.request.body.raw);",
							"    ",
							"    pm.expect(newEmployee.firstName).to.equal(requestBody.firstName);",
							"    pm.expect(newEmployee.lastName).to.equal(requestBody.lastName);",
							"    pm.expect(newEmployee.dependants).to.equal(requestBody.dependants);",
							"});",
							"",
							"pm.test(\"Default values are set correctly\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.expect(newEmployee.salary).to.equal(52000);",
							"    pm.expect(newEmployee.gross).to.equal(2000);",
							"    pm.expect(newEmployee.username).to.equal(\"TestUser773\");",
							"});",
							"",
							"pm.test(\"Benefits are calculated correctly\", function () {",
							"    const newEmployee = pm.response.json();",
							"    const expectedCost = (1000 + (newEmployee.dependants * 500)) / 26;",
							"    const expectedNet = 2000 - expectedCost;",
							"    ",
							"    pm.expect(newEmployee.benefitsCost).to.be.closeTo(expectedCost, 0.01);",
							"    pm.expect(newEmployee.net).to.be.closeTo(expectedNet, 0.01);",
							"});",
							"",
							"// Guardar ID para usar en otros tests",
							"pm.test(\"Save employee ID for cleanup\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.globals.set(\"createdEmployeeId\", newEmployee.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3NzM6NnEwXWwkQktPVWIh",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Oscar\",\n    \"lastName\": \"Test\",\n    \"dependants\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/Api/Employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"Api",
						"Employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prod/Api/Employees Error 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Employee was created successfully\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.expect(newEmployee).to.have.property('id');",
							"    pm.expect(newEmployee.id).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Created employee has correct data\", function () {",
							"    const newEmployee = pm.response.json();",
							"    const requestBody = JSON.parse(pm.request.body.raw);",
							"    ",
							"    pm.expect(newEmployee.firstName).to.equal(requestBody.firstName);",
							"    pm.expect(newEmployee.lastName).to.equal(requestBody.lastName);",
							"    pm.expect(newEmployee.dependants).to.equal(requestBody.dependants);",
							"});",
							"",
							"pm.test(\"Default values are set correctly\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.expect(newEmployee.salary).to.equal(52000);",
							"    pm.expect(newEmployee.gross).to.equal(2000);",
							"    pm.expect(newEmployee.username).to.equal(\"TestUser773\");",
							"});",
							"",
							"pm.test(\"Benefits are calculated correctly\", function () {",
							"    const newEmployee = pm.response.json();",
							"    const expectedCost = (1000 + (newEmployee.dependants * 500)) / 26;",
							"    const expectedNet = 2000 - expectedCost;",
							"    ",
							"    pm.expect(newEmployee.benefitsCost).to.be.closeTo(expectedCost, 0.01);",
							"    pm.expect(newEmployee.net).to.be.closeTo(expectedNet, 0.01);",
							"});",
							"",
							"// Guardar ID para usar en otros tests",
							"pm.test(\"Save employee ID for cleanup\", function () {",
							"    const newEmployee = pm.response.json();",
							"    pm.globals.set(\"createdEmployeeId\", newEmployee.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3NzM6NnEwXWwkQktPVWIh",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Oscar\",\n    \"lastName\": \"Test\",\n    \"dependants\": 0\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/Api/Employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"Api",
						"Employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prod/Api/Employees/d3264883-c4e5-41f4-9c46-37de9ce5a453",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 405 (Method Not Allowed)\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"PUT method is not supported\", function () {",
							"    pm.expect(pm.response.code).to.equal(405);",
							"});",
							"",
							"pm.test(\"Response indicates method not allowed\", function () {",
							"    // Verificar que la respuesta indica que el método no está permitido",
							"    pm.expect(pm.response.status).to.include(\"Method Not Allowed\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3NzM6NnEwXWwkQktPVWIh",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"d3264883-c4e5-41f4-9c46-37de9ce5a453\",\n    \"firstName\": \"Oscar\",\n    \"lastName\": \"Updated\", \n    \"dependants\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/Api/Employees/d3264883-c4e5-41f4-9c46-37de9ce5a453",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"Api",
						"Employees",
						"d3264883-c4e5-41f4-9c46-37de9ce5a453"
					]
				}
			},
			"response": []
		},
		{
			"name": "Prod/Api/Employees/d3264883-c4e5-41f4-9c46-37de9ce5a453",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Test corregido - verificar el comportamiento real",
							"pm.test(\"Verify deletion behavior\", function () {",
							"    const deletedId = pm.request.url.path[pm.request.url.path.length - 1];",
							"    ",
							"    pm.sendRequest({",
							"        url: pm.request.url.toString(),",
							"        method: 'GET',",
							"        header: {",
							"            'Authorization': pm.request.headers.get('Authorization')",
							"        }",
							"    }, function (err, response) {",
							"        if (!err) {",
							"            // Documentar el comportamiento real",
							"            console.log(\"GET after DELETE returned:\", response.code);",
							"            pm.test(\"Document actual DELETE behavior\", function () {",
							"                // Acepta tanto 200 como 404 - documenta cuál ocurre",
							"                pm.expect([200, 404]).to.include(response.code);",
							"            });",
							"        }",
							"    });",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI3NzM6NnEwXWwkQktPVWIh",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"id\": \"d3264883-c4e5-41f4-9c46-37de9ce5a453\",\n    \"firstName\": \"Oscar\",\n    \"lastName\": \"Updated\", \n    \"dependants\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/Api/Employees/d3264883-c4e5-41f4-9c46-37de9ce5a453",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"Api",
						"Employees",
						"d3264883-c4e5-41f4-9c46-37de9ce5a453"
					]
				}
			},
			"response": []
		}
	]
}